{"version":3,"file":"views\\salesQuotes\\newRevision-7cf3840ad0d3e5a9d8fa.js","sources":["webpack:///webpack/bootstrap ec8d2d3b3b6798ff78c1","webpack:///app/assets/javascripts/packs/views/salesQuotes/new.js","webpack:///app/assets/javascripts/packs/views/salesQuotes/newRevision.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ec8d2d3b3b6798ff78c1","const newAction = () => {\n    let vj = initVueJS();\n\n    $('body').on(\"fields_added.nested_form_fields\", function (e, params) {\n        vj.$destroy();\n        vj = initVueJS();\n    }).on(\"fields_removing.nested_form_fields\", function (e, params) {\n        vj.$destroy();\n        vj = initVueJS();\n    });\n};\n\nlet initVueJS = () => {\n    return new Vue({\n        el: 'form',\n        data: assignEventsAndGetAttributes(),\n        watch: {\n            rows: {\n                handler(oldVal, newVal) {\n                    this.rowsUpdated();\n                },\n                deep: true\n            },\n            conversion_rate() {\n                this.updateConvertedSellingPrices()\n            },\n        },\n        computed: {\n            totalFreightCost: function () {\n                // let total = 0;\n                //\n                // this.rows.forEach(function (row, index) {\n                //     total += parseFloat(row.freight_cost_subtotal);\n                // });\n                //\n                // return total;\n            }\n        },\n        methods: {\n            getAttribute(name) {\n                return this[name]\n            },\n\n            getRow(index) {\n                return this.rows[index];\n            },\n\n            setRow(index, row) {\n                if (row !== undefined) {\n                    this.rows[index] = row;\n                }\n            },\n\n            dropRow(index) {\n                let row = this.getRow(index);\n                for (var property in row) {\n                    if (row.hasOwnProperty(property)) {\n                        row[property] = 0;\n                    }\n                }\n                this.setRow(index, row);\n            },\n\n            rowUpdated(index) {\n                let row = this.getRow(index);\n                // perform calculations\n                this.updateConvertedSellingPriceFor(index);\n\n                this.setRow(index, row)\n            },\n\n            rowsUpdated() {\n                let _this = this;\n\n                _this.rows.forEach(function (row, currentRowIndex) {\n                    _this.rowUpdated(currentRowIndex);\n                });\n\n                this.afterRowsUpdated();\n            },\n\n            afterRowsUpdated() {\n                let total = 0;\n                this.rows.forEach(function (row, index) {\n                    total += parseFloat(row.freight_cost_subtotal);\n                });\n                this.calculated_freight_cost_total = total;\n            },\n\n            dropdownChanged(e) {\n                let container = e.target;\n                let optionSelected = $(\"option:selected\", container);\n                let _this = this;\n\n                $.each(optionSelected.data(), function (k, v) {\n                    _this[underscore(k)] = v;\n                });\n            },\n\n            quantityChangedFor(index) {\n                this.triggerFreightChangeFor(index, 'quantity');\n            },\n\n            freightCostSubtotalChangedFor(index) {\n                this.triggerFreightChangeFor(index, 'freight_cost_subtotal');\n            },\n\n            unitFreightCostChangedFor(index) {\n                this.triggerFreightChangeFor(index, 'unit_freight_cost');\n            },\n\n            unitCostPriceChangedFor(index) {\n                this.triggerSellingPriceChangeFor(index);\n            },\n\n            unitCostPriceWithUnitFreightCostChangedFor(index) {\n                this.triggerSellingPriceChangeFor(index);\n            },\n\n            marginPercentageChangedFor(index) {\n                this.triggerSellingPriceChangeFor(index, 'margin_percentage');\n            },\n\n            unitSellingPriceChangedFor(index) {\n                this.triggerSellingPriceChangeFor(index);\n            },\n\n            convertedUnitSellingPriceChangedFor(index) {\n\n            },\n\n            changeSupplier(event) {\n                /*let container = event.target;\n                let optionSelected = $(\"option:selected\", container);\n                let select = $(container).closest('select');\n                let _this = this;\n                let row = select.data('row');\n                if (_this.rows[row] !== undefined) {\n                    $.each(optionSelected.data(), function (k, v) {\n                        _this.rows[row][underscore(k)] = v;\n                    });\n                    this.triggerFreightChangeFor(row, 'quantity');\n                }*/\n            },\n            sellingPriceChangedFor(index) {\n                // this.triggerSellingPriceChangeFor(index);\n            },\n\n            triggerFreightChangeFor(index, trigger) {\n                let row = this.getRow(index);\n\n                let freight_cost_subtotal = row.freight_cost_subtotal;\n                let unit_freight_cost = row.unit_freight_cost;\n                let quantity = row.quantity;\n\n                if (trigger === 'freight_cost_subtotal' && freight_cost_subtotal >= 0) {\n                    row.unit_freight_cost = toDecimal(freight_cost_subtotal / quantity);\n                } else if (trigger === 'unit_freight_cost' || trigger === 'quantity') {\n                    row.freight_cost_subtotal = toDecimal(unit_freight_cost * quantity);\n                }\n\n                row.unit_cost_price_with_unit_freight_cost = toDecimal(row.unit_freight_cost) + toDecimal(row.unit_cost_price);\n\n                this.setRow(index, row);\n            },\n\n            triggerSellingPriceChangeFor(index, trigger) {\n                let row = this.getRow(index);\n\n\n                console.dir(row);\n                let margin_percentage = row.margin_percentage;\n                let unit_selling_price = row.unit_selling_price;\n                let unit_cost_price_with_unit_freight_cost = row.unit_cost_price_with_unit_freight_cost;\n\n                if (trigger === 'margin_percentage' && margin_percentage >= 0 && margin_percentage < 100) {\n                    unit_selling_price = unit_cost_price_with_unit_freight_cost / (1 - (margin_percentage / 100));\n                    row.unit_selling_price = toDecimal(unit_selling_price);\n                } else {\n                    margin_percentage = 1 - (unit_cost_price_with_unit_freight_cost / unit_selling_price);\n                    row.margin_percentage = toDecimal(margin_percentage * 100);\n                }\n                this.setRow(index, row);\n            },\n\n            updateConvertedSellingPriceFor(index) {\n                let row = this.getRow(index);\n                row.converted_unit_selling_price = toDecimal(row.unit_selling_price) / toDecimal(this.getAttribute('conversion_rate'));\n                this.setRow(index, row);\n            },\n\n            updateConvertedSellingPrices() {\n                let _this = this;\n\n                _this.rows.forEach(function (row, currentRowIndex) {\n                    _this.updateConvertedSellingPriceFor(currentRowIndex);\n                })\n            }\n        },\n    })\n};\n\nlet assignEventsAndGetAttributes = () => {\n    let rows = [];\n    let data = {};\n\n    // Handle repeatable rows\n    $('[data-index]').each(function (index, row) {\n        let currentRowIndex = $(row).data('index');\n\n        if ($(row).is(':visible')) {\n            let currentRowTemplate = {};\n\n            // Bind attributes\n            $(row).find('[data-bind]').each(function (index, el) {\n                let attributeName = el.name.match(/\\[([a-z_]*)\\]$/)[1];\n                let attributeVal = $(el).val();\n\n                // To recreate VueJS v-model when nested form rows are added or removed\n                $(el).attr(\"v-model\", [\"rows[\", currentRowIndex, \"].\", attributeName].join(''));\n                currentRowTemplate[attributeName] = attributeVal;\n\n                assignDataEventsAsEvents(el, currentRowIndex);\n            });\n\n            // Bind non-input events like buttons\n            $(row).find('[data-v]').each(function (index, element) {\n                assignDataEventsAsEvents(element, currentRowIndex);\n            });\n\n            rows[currentRowIndex] = currentRowTemplate;\n        }\n    });\n\n    // Independent of rows, like a total row\n    $('[data-v-model]').each(function (index, el) {\n        let attributeName = el.name.match(/\\[([a-z_]*)\\]$/)[1];\n        let attributeValue = $(el).val();\n\n        $(el).attr(\"v-model\", attributeName);\n        data[attributeName] = attributeValue;\n\n        assignDataEventsAsEvents($(el), undefined);\n    });\n\n    // V-models that cannot be edited, auto calculated\n    $('[data-v-computed]').each(function (index, el) {\n        $(el).attr(\"v-model\", $(el).attr('data-v-computed'));\n    });\n\n    data.rows = rows;\n    return data;\n};\n\nlet assignDataEventsAsEvents = (el, currentRowIndex = '') => {\n    let eventNames = ['v-on:change', 'v-on:input', 'v-on:click'];\n    let attributeName = undefined;\n\n    if (el.name !== undefined && el.name.trim() !== '') {\n        attributeName = el.name.match(/\\[([a-z_]*)\\]$/)[1];\n\n        let methodName = camelize([attributeName, 'Changed', 'For'].join('_'));\n\n        if (currentRowIndex !== '') {\n            methodName += '(' + currentRowIndex + ')'\n        }\n\n        eventNames.forEach(function (eventName) {\n            $(el).attr('v-on:input', methodName);\n        });\n    } else {\n        eventNames.forEach(function (eventName) {\n            if ($(el).data(eventName)) {\n                $(el).attr(eventName, $(el).data(eventName).replace('_index_', currentRowIndex));\n            }\n        });\n    }\n};\n\nlet toDecimal = (value, precision = 2) => {\n    return parseFloat(value).toFixed(precision);\n};\n\nexport default newAction\n\n\n// WEBPACK FOOTER //\n// app/assets/javascripts/packs/views/salesQuotes/new.js","// Imports\nimport newAction from \"./new\";\n\nconst newRevision = () => {\n    newAction();\n};\n\nexport default newRevision\n\n\n// WEBPACK FOOTER //\n// app/assets/javascripts/packs/views/salesQuotes/newRevision.js"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAMA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA/JA;AAzBA;AA2LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;AC3RA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}